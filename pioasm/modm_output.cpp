/*
 * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <algorithm>
#include <iostream>
#include "output_format.h"
#include "pio_disassembler.h"

struct modm_output : public output_format {
    struct factory {
        factory() {
            output_format::add(new modm_output());
        }
    };

    modm_output() : output_format("modm") {}

    std::string get_description() override {
        return "C++ header suitable for use with the modm library";
    }

    void output_symbols(FILE *out, std::string prefix, const std::vector<compiled_source::symbol> &symbols) {
        int count = 0;
        for (const auto &s : symbols) {
            if (!s.is_label) {
                fprintf(out, "static constexpr auto %s%s = %d;\n", prefix.c_str(), s.name.c_str(), s.value);
                count++;
            }
        }
        if (count) {
            fprintf(out, "\n");
            count = 0;
        }
        for (const auto &s : symbols) {
            if (s.is_label) {
                fprintf(out, "static constexpr uint8_t %soffset_%s %du\n", prefix.c_str(), s.name.c_str(), s.value);
                count++;
            }
        }
        if (count) {
            fprintf(out, "\n");
        }
    }

    void header(FILE *out, std::string msg) {
        std::string dashes = std::string(msg.length(), '-');
        fprintf(out, "// %s\n", dashes.c_str());
        fprintf(out, "// %s\n", msg.c_str());
        fprintf(out, "// %s\n", dashes.c_str());
        fprintf(out, "\n");
    }

    int output(std::string destination, std::vector<std::string> output_options,
               const compiled_source &source) override {

        for (const auto &program : source.programs) {
            for(const auto &p : program.lang_opts) {
                if (p.first.size() >= name.size() && p.first.compare(0, name.size(), name) == 0) {
                    std::cerr << "warning: " << name << " does not support output options; " << p.first << " lang_opt ignored.\n";
                }
            }
        }
        FILE *out = open_single_output(destination);
        if (!out) return 1;

        header(out, "This file is autogenerated by pioasm; do not edit!");

        fprintf(out, "#pragma once\n");
        fprintf(out, "#include <modm/platform/pio/program.hpp>\n\n");
        fprintf(out, "namespace modm::generated\n{\n\n");

        output_symbols(out, "", source.global_symbols);

        for (const auto &program : source.programs) {
            fprintf(out, "namespace %s\n{\n\n", program.name.c_str());

            std::string prefix = "";

            output_symbols(out, prefix, program.symbols);

            fprintf(out, "static constinit uint16_t %sinstructions[] =\n{\n", prefix.c_str());
            for (int i = 0; i < (int)program.instructions.size(); i++) {
                const auto &inst = program.instructions[i];
                if (i == program.wrap_target) {
                    fprintf(out, "\t\t\t//\t\t.wrap_target\n");
                }
                fprintf(out, "\t0x%04x,\t// %2d:\t%s\n", inst, i,
                        disassemble(inst, program.sideset_bits_including_opt.get(), program.sideset_opt).c_str());
                if (i == program.wrap) {
                    fprintf(out, "\t\t\t//\t\t.wrap\n");
                }
            }
            fprintf(out, "};\n");
            fprintf(out, "\n");

            fprintf(out, "static constinit PioProgram %sprogram\n{\n", prefix.c_str());
            fprintf(out, "\t%sinstructions,\n", prefix.c_str());
            fprintf(out, "\t%d,\t\t// offset\n", program.origin.get());
            fprintf(out, "\t%d,\t\t// wrap_target\n", program.wrap_target);
            fprintf(out, "\t%d,\t\t// wrap\n", program.wrap);
            fprintf(out, "\t%d,\t\t// size_set_count\n", program.sideset_bits_including_opt.get());
            fprintf(out, "\t%s,\t// side_set_optional\n", program.sideset_opt ? "true" : "false");
            fprintf(out, "\t%s,\t// side_set_pindir\n", program.sideset_pindirs ? "true" : "false");
            fprintf(out, "};\n\n");

            // todo maybe have some code blocks inside or outside here?
            for(const auto& o : program.code_blocks) {
                fprintf(out, "\n");
                if (o.first == name) {
                    for(const auto &contents : o.second) {
                        fprintf(out, "%s", contents.c_str());
                        fprintf(out, "\n");
                    }
                }
            }

            fprintf(out, "} // namespace %s\n\n", program.name.c_str());
        }
        fprintf(out, "} // namespace modm::generated\n");
        if (out != stdout) { fclose(out); }
        return 0;
    }
};

static modm_output::factory creator;
